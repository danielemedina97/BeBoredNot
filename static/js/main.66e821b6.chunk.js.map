{"version":3,"sources":["resources/components/navbar/Navbar.js","resources/components/activity-form/ActivityForm.js","resources/components/results/Results.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","id","className","ActivityForm","handleSubmit","onSubmit","style","display","htmlFor","type","value","Results","num","string","queryData","activity","charAt","toUpperCase","slice","participants","accessibility","price","App","useState","setQueryData","loading","setLoading","madeQuery","setMadeQuery","foundResult","setFoundResult","getQuery","queryURL","a","fetch","response","json","data","error","console","log","item","Helmet","charSet","name","content","e","preventDefault","values","Array","from","document","getElementsByClassName","numFields","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.66e821b6.chunk.js","sourcesContent":["import React from 'react';\nimport './Navbar.css';\n\nexport default function Navbar() {\n    return (\n        <>\n            <nav id=\"navbar\">\n              <div className=\"heading\">\n               Be Bored Not <br/>\n               Find Something to Do!\n              </div>   \n            </nav>\n        </>\n    )\n}\n","import React from 'react'\nimport './ActivityForm.css'\nexport default function ActivityForm({handleSubmit}) {\n    return (\n        <div id=\"wrapper\">\n            <h1>Specify an Activity</h1>\n            <form className=\"activity-query\" onSubmit={handleSubmit} style={{display: ''}}>\n                <div className=\"activity-options\">\n                    {/*\n                   <div className=\"input-field\">\n                        <label htmlFor=\"accessibility\">Accessibility: </label>\n                        <input className=\"activity\" id=\"accessibility\" type=\"text\"></input>\n                    </div>\n                    */}\n                    <div className=\"input-field\">\n                        <label htmlFor=\"type\">Type: </label>\n                        <select className=\"activity\" id=\"type\" type=\"text\">\n                            <option value=\"education\">Education</option>\n                            <option value=\"recreational\">Recreational</option>\n                            <option value=\"social\">Social</option>\n                            <option value=\"diy\">DIY</option>\n                            <option value=\"charity\">Charity</option>\n                            <option value=\"cooking\">Cooking</option>\n                            <option value=\"relaxation\">Relaxation</option>\n                            <option value=\"music\">Music</option>\n                            <option value=\"busy\">Busy</option>\n                        </select>\n                    </div>\n                    <div className=\"input-field\">\n                        <label htmlFor=\"participants\">Participants: </label>\n                        <select className=\"activity\" id=\"participants\" type=\"text\">\n                            <option value=\"1\">1</option>\n                            <option value=\"2\">2</option>\n                            <option value=\"3\">3</option>\n                            <option value=\"4\">4</option>\n                            <option value=\"5\">5</option>\n                            <option value=\"8\">8</option>\n                        </select>\n                    </div>\n                    {/*}\n                    <div className=\"input-field\">\n                        <label htmlFor=\"price\">Price: </label>\n                        <input className=\"activity\" id=\"price\" type=\"text\"></input>\n                    </div>\n                */}\n                </div>\n                    <div>\n                        <input id =\"submit\" type=\"submit\" value=\"Get Activity\"/>\n                    </div>\n            </form> \n        </div>\n    )\n}\n","import React from 'react'\nimport './Results.css'\n\nexport default function Results({queryData}) {\n    //capitilizes first letter of word\n    function capitalizeFirstLetter(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n      }\n\n    //returns string of the accessibility \n    function accessibility(num) {\n        if(num > .66){\n            return \"Not Very Accessible\";\n        } if(num > .29) {\n            return \"Moderately Accessible\"\n        } if(num < .3){\n            return \"Very Accessible\"\n        }\n    }\n\n    function price(num) {\n        if(num > .66){\n            return \"High\";\n        } if(num > .29) {\n            return \"Moderate\"\n        } if(num < .3){\n            return \"Low\"\n        }\n    }\n\n\n    return (\n        <div id=\"result-body\">\n            <div className=\"results-wrapper\">\n            <h1>Do This!</h1>\n                <div className=\"result\">Activity: {queryData.activity} </div>\n                <div className=\"result\">Type: {capitalizeFirstLetter(queryData.type)} </div>\n                <div className=\"result\">Participants: {queryData.participants} </div>\n                <div className=\"result\">Accessibility: {accessibility(queryData.accessibility)}</div>\n                <div className=\"result\">Price: {price(queryData.price)}</div>\n            </div>\n        </div>\n    )\n}\n","//import { getSuggestedQuery } from '@testing-library/dom';\nimport './App.css';\nimport Navbar from './resources/components/navbar/Navbar';\nimport ActivityForm from './resources/components/activity-form/ActivityForm';\nimport Results from './resources/components/results/Results';\nimport { useState } from 'react';\nimport { Helmet } from 'react-helmet';\n\nfunction App() {\n  \n  const [queryData, setQueryData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [madeQuery, setMadeQuery] = useState(false);\n  const [foundResult, setFoundResult] = useState(false);\n \n  let getQuery = async (queryURL) => {\n    setLoading(true);\n    const response = await fetch(queryURL)\n    const data =  await response.json();\n    if(data.error){\n      setLoading(false);\n      setFoundResult(false);\n      console.log(\"No results\");\n    } else{\n    setFoundResult(true);\n    console.log(data);\n    const item = data;\n    console.log(item);\n    setQueryData(item);\n    setLoading(false);\n    }\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setMadeQuery(true);\n    var queryURL = \"https://www.boredapi.com/api/activity/\";\n    var values = Array.from(document.getElementsByClassName(\"activity\"));\n    //let isEmptyQuery = true;//if empty, the query will be random.\n    var numFields = 0;\n    for(let i in values){\n      if(values[i].value !== \"\"){\n        numFields = numFields + 1;\n        if(numFields === 1){\n          queryURL = queryURL.slice(0, -1) + \"?\";\n        }\n        if(numFields > 1){\n          queryURL = queryURL + '&&'\n        }\n        //if(isEmptyQuery){\n          //isEmptyQuery = false;\n          //queryURL = queryURL.slice(0, -1);\n          queryURL = queryURL + values[i].id +  '=' + values[i].value;\n        //}\n        //queryURL = queryURL + values[i].id +  '=' + values[i].value;\n      }\n    }\n    //console.log(queryURL);\n    getQuery(queryURL);\n\n  };\n\n  return (\n    <div className=\"App\">\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <meta name='viewport' content=\"width=device-width, initial-scale=1.0\"/>\n        <title>Be Bored Not </title>\n      </Helmet>\n      <div className=\"app-body\">\n        <Navbar/>\n        <div id=\"activity-form-border\">\n          <div id=\"activity-form-wrapper\">\n        <ActivityForm handleSubmit = {handleSubmit}/>\n          </div>\n        </div>\n        <div id=\"results-section\">\n        {!madeQuery ? <div id=\"suggestion-here\"> Your suggestion here: </div> : \n        loading ? <div id=\"loading\">Loading...</div>: \n        !foundResult ? <div id=\"no-result\">No Result Found</div> : \n        <div id=\"results-wrapper\"><Results queryData={queryData}/> </div>}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}